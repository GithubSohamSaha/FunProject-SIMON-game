var buttonColours = ["red", "blue", "green", "yellow"];//The buttonColours array contains the colors that can be used in the game.

var gamePattern = [];//gamePattern array stores the sequence of colors generated by the game.

var userClickedPattern = [];//userClickedPattern array stores the sequence of colors clicked by the user.

var started = false;//started variable is a boolean flag to check if the game has started.
var level = 0;//level variable stores the current level of the game.

//The code uses jQuery to handle events and manipulate the DOM elements.

//When a key is pressed on the document, the keypress event is triggered. If the game has not started (!started), it sets the level title and calls the nextSequence function to start the game.
$(document).keypress(function() {
  if (!started) {
    $("#level-title").text("Level " + level);
    nextSequence();
    started = true;
  }
});

//When a button with the class .btn is clicked, it gets the color of the button clicked by the user, adds it to userClickedPattern, plays a sound, and animates the button press. Then, it calls the checkAnswer function with the index of the current level.
$(".btn").click(function() {
  var userChosenColour = $(this).attr("id");
  userClickedPattern.push(userChosenColour);

  playSound(userChosenColour);
  animatePress(userChosenColour);

  checkAnswer(userClickedPattern.length-1);
});

//The checkAnswer function compares the current color clicked by the user with the color in the gamePattern at the same index. If they match and the user has completed the sequence, it calls nextSequence after a delay. If they don't match, it plays a wrong sound, adds a class to the body for a game-over effect, updates the level title, removes the class after a delay, and calls startOver to reset the game.
function checkAnswer(currentLevel) {

    if (gamePattern[currentLevel] === userClickedPattern[currentLevel]) {
      if (userClickedPattern.length === gamePattern.length){
        setTimeout(function () {
          nextSequence();
        }, 1000);
      }
    } else {
      playSound("wrong");
      $("body").addClass("game-over");
      $("#level-title").text("Game Over, Press Any Key to Restart");

      setTimeout(function () {
        $("body").removeClass("game-over");
      }, 200);

      startOver();
    }
}

//The nextSequence function resets the userClickedPattern, increments the level, updates the level title, generates a random number to select a color from buttonColours, adds the color to gamePattern, and shows a visual effect for the selected color while playing the corresponding sound.
function nextSequence() {
  userClickedPattern = [];
  level++;
  $("#level-title").text("Level " + level);
  var randomNumber = Math.floor(Math.random() * 4);
  var randomChosenColour = buttonColours[randomNumber];
  gamePattern.push(randomChosenColour);

  $("#" + randomChosenColour).fadeIn(100).fadeOut(100).fadeIn(100);
  playSound(randomChosenColour);
}

//The animatePress function adds a class to animate the button press effect and removes it after a delay.
function animatePress(currentColor) {
  $("#" + currentColor).addClass("pressed");
  setTimeout(function () {
    $("#" + currentColor).removeClass("pressed");
  }, 100);
}

//The playSound function creates an Audio object to play the sound corresponding to the input name.
function playSound(name) {
  var audio = new Audio("sounds/" + name + ".mp3");
  audio.play();
}

//The startOver function resets the level, gamePattern, and started flag to restart the game.This code implements a simple Simon game logic using JavaScript and jQuery.
function startOver() {
  level = 0;
  gamePattern = [];
  started = false;
}
